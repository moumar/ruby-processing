require 'rake/clean'

CLEAN.include("jruby-1.6.4", "sources_has_been_patched", "orig")
CLOBBER.include("processing-1.5.1-windows-expert.zip", "jruby-src-1.6.4.tar.gz")

desc "download, patch, build and copy to ruby-processing"
task :default => [:download, :patch, :build, :copy]

desc "download Processing & JRuby upstream sources"
task :download => ["processing-1.5.1-windows-expert.zip", "jruby-src-1.6.4.tar.gz"]

# taking this version is because this is the smallest build available with all the librairies we need
file "processing-1.5.1-windows-expert.zip" do
  # /home/moumar/src/processing-1.5.1/build/linux/work/modes/java/libraries
  sh "wget http://processing.googlecode.com/files/processing-1.5.1-windows-expert.zip"
  check_sha1("processing-1.5.1-windows-expert.zip", "d3044e07c34b6eda2360987d67faf8c1cd687ffa")
  #unzip -o /home/moumar/src/processing-1.5.1-windows-expert.zip 'processing-1.5.1/modes/java/libraries/opengl/library/*' 'processing-1.5.1/modes/java/libraries/minim/library/*'"
end

file "jruby-src-1.6.4.tar.gz" do
  sh "wget -O jruby-src-1.6.4.tar.gz http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby-src-1.6.4.tar.gz"
  check_sha1("jruby-src-1.6.4.tar.gz", "733f55a64e2eb8131ddd31a724918b785eb04d36")
end

task "jruby-1.6.4" => "jruby-src-1.6.4.tar.gz" do
  sh "tar xzf jruby-src-1.6.4.tar.gz" unless test(?d, "jruby-1.6.4" )
end

directory 'orig'

desc "create diffs for processing & jruby"
task :diff => 'orig' do 
  Dir.chdir("orig") do
    sh "tar xzf ../jruby-src-1.6.4.tar.gz" unless test(?d, "jruby-1.6.4")
    sh "diff -u jruby-1.6.4/src/org/jruby/JRubyApplet.java ../jruby-1.6.4/src/org/jruby/JRubyApplet.java | tee ../patches/jruby-1.6.4.patch"
  end
end

desc "delete sources, extract, and repatch"
task :repatch do
  sh "rm -rf sources_has_been_patched jruby-1.6.4"
  Rake::Task['patch'].invoke
end

desc "patch sources"
task :patch => "sources_has_been_patched"

file "sources_has_been_patched" => ["jruby-1.6.4"] do
  sh "cd jruby-1.6.4/ && patch -p1 < ../patches/jruby-1.6.4.patch"
  touch "sources_has_been_patched"
end

desc "build"
task :build => ["jruby-1.6.4/lib/jruby-complete.jar"]

file "jruby-1.6.4/lib/jruby-complete.jar" do
  sh "cd jruby-1.6.4 && ant jar-jruby-complete"
end

directory "../lib/core"

desc "copy libs & jars"
task :copy => ["../lib/core", "jruby-1.6.4/lib/jruby-complete.jar"] do
  Dir.chdir("jruby-1.6.4") do
    sh "cp -v lib/jruby-complete.jar ../../lib/core/"
  end

  processing_zip = File.expand_path("processing-1.5.1-windows-expert.zip")
  sh "cd ../lib/core && unzip -qoj #{processing_zip} processing-1.5.1/lib/core.jar"

  dirs = %w{dxf javascript minim net opengl pdf serial video}
  Dir.chdir("../library/") do
    sh "rm -rf processing-1.5.1/ #{dirs.join(" ")}"
    inside_zip_dirs = dirs.collect { |d| "processing-1.5.1/modes/java/libraries/#{d}/library/*" }
    sh "unzip -q #{processing_zip} #{inside_zip_dirs.join(" ")}"
    sh "mv processing-1.5.1/modes/java/libraries/* ."
    sh "rm -r processing-1.5.1/"
  end
end

def check_sha1(filename, expected_hash)
  require "digest/sha1"
  sha1 = Digest::SHA1.new
  File.open(filename, "r") do |f|
    while buf = f.read(4096)
      sha1.update(buf)
    end
  end
  if sha1.hexdigest != expected_hash
    raise "bad sha1 checksum for #{filename} (expected #{expected_hash} got #{sha1.hexdigest})"
  end
end
